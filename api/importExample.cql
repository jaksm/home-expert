call apoc.load.json("file:///gallatin.geojson") yield value
foreach (f in value.features |
    create (p:Property {
        propertyID: f.properties.PropertyID,
        countyName: f.properties.CountyName,
        countyAbbreviation: f.properties.CountyAbbr,
        taxYear: f.properties.TaxYear,
        assessment: f.properties.Assessment,
        township: f.properties.Township,
        range: f.properties.Range,
        section: f.properties.Section,
        legalDescription: f.properties.LegalDescr,
        subdivision: f.properties.Subdivisio,
        certificate: f.properties.Certificat,
        addressLine: f.properties.AddressLin,
        addressLine1: f.properties.AddressL_1,
        cityState: f.properties.CityStateZ,
        access: f.properties.PropAccess,
        levyDistrict: f.properties.LevyDistri,
        type: f.properties.PropType,
        continuous: f.properties.Continuous,
        buildingValue: f.properties.TotalBuild,
        landValue: f.properties.TotalLandV,
        totalValue: f.properties.TotalValue,
        farmsiteArea: f.properties.FarmsiteAc,
        forestArea: f.properties.ForestAcre,
        grazingArea: f.properties.GrazingAcr,
        wildHayArea: f.properties.WildHayAcr,
        irrigatedArea: f.properties.IrrigatedA,
        nonQualityArea: f.properties.NonQualAcr,
        totalArea: f.properties.TotalAcres,
        ownerName: f.properties.OwnerName,
        ownerAddress: f.properties.OwnerAddre,
        ownerAddressLine1: f.properties.OwnerAdd_1,
        ownerAddressLine2: f.properties.OwnerAdd_2,
        ownerCity: f.properties.OwnerCity,
        ownerState: f.properties.OwnerState,
        ownerZip: f.properties.OwnerZipCo,
        geometryType: f.geometry.type,
        geometryLength: f.properties.SHAPE_Leng,
        geometryArea: f.properties.SHAPE_Area
    })
)